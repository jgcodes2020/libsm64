/*
 * This C++ source file was generated by the Gradle 'init' task.
 */

#include <cassert>

#include <string>
#include <iostream>
#include <fstream>
#include <vector>
#include <set>
#include <utility>
#include <typeinfo>

#include "libsm64_utils/sm64.hpp"
#include "libtest.hpp"

using std::string, std::cout, std::clog, std::flush, std::pair, std::vector;

using namespace libtest;

#if defined(_WIN32)
#include <windows.h>
string cwd() {
  char data[MAX_PATH];
  GetCurrentDirectoryA(MAX_PATH, data);
  return string(data);
}
#elif defined(__unix__)
#include <unistd.h>
string cwd() {
  char data[300];
  getcwd(data, 300);
  return string(data);
}
#else
string cwd() {
  return "not discoverable on this system";
}
#endif

int main() {
  cout << "Running on C++" << (__cplusplus / 100) % 100 << "\n";
  cout << "current dir is " << cwd() << "\n\n" << flush;
  
  test_suite suite = test_suite({
    test("A Press Counter", []() {
      using std::fstream;
      using std::set;
      using namespace libsm64;

      clog << "before load\n"; 
      m64_movie bomb_clip_tas = m64_movie("res/superminer-bomb-clip.m64");
      clog << "after load\n"; 
      set<size_t> a_press_frames;
      for (size_t i = 0; i < bomb_clip_tas.size(); i++) {
        input_frame& frame = bomb_clip_tas[i];
        if (frame.pressed(input_frame::button::A)) {
          if (i == 0 || !bomb_clip_tas[i - 1].pressed(input_frame::button::A)) {
            a_press_frames.insert(i);
          }
        }
      }
      clog << "the bomb clip tas is " << a_press_frames.size() << "xA; presses on frames ";
      for (auto& press: a_press_frames) {
        clog << press << ", ";
      }
      clog << "\b\b  \n";
      LIBTEST_ASSERT(a_press_frames.size() == 11);
    })
  });
  suite.test_all();

  return 0;
}
